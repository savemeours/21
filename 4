local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer

local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "CardCounter"
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = game.CoreGui

local Main = Instance.new("Frame")
Main.Name = "Main"
Main.Size = UDim2.new(0, 320, 0, 180)
Main.Position = UDim2.new(0.5, -160, 0.18, 0)
Main.AnchorPoint = Vector2.new(0.5, 0)
Main.BackgroundTransparency = 0
Main.BackgroundColor3 = Color3.fromRGB(22, 24, 26)
Main.BorderSizePixel = 0
Main.Parent = ScreenGui
local MainCorner = Instance.new("UICorner", Main)
MainCorner.CornerRadius = UDim.new(0, 10)
local MainStroke = Instance.new("UIStroke", Main)
MainStroke.Thickness = 1
MainStroke.Color = Color3.fromRGB(40, 40, 40)
MainStroke.Transparency = 0.15

local Header = Instance.new("Frame", Main)
Header.Name = "Header"
Header.Size = UDim2.new(1, 0, 0, 36)
Header.Position = UDim2.new(0, 0, 0, 0)
Header.BackgroundTransparency = 1

local Title = Instance.new("TextLabel", Header)
Title.AnchorPoint = Vector2.new(0, 0.5)
Title.Position = UDim2.new(0, 12, 0.5, 0)
Title.Size = UDim2.new(0.6, 0, 0.9, 0)
Title.BackgroundTransparency = 1
Title.Font = Enum.Font.SourceSansBold
Title.TextSize = 18
Title.TextColor3 = Color3.fromRGB(240, 240, 240)
Title.TextXAlignment = Enum.TextXAlignment.Left
Title.Text = "Card Counter • Advisor"

local LastUpdateLabel = Instance.new("TextLabel", Header)
LastUpdateLabel.AnchorPoint = Vector2.new(1, 0.5)
LastUpdateLabel.Position = UDim2.new(0.99, -28, 0.5, 0)
LastUpdateLabel.Size = UDim2.new(0.42, 0, 0.9, 0)
LastUpdateLabel.BackgroundTransparency = 1
LastUpdateLabel.Font = Enum.Font.SourceSans
LastUpdateLabel.TextSize = 12
LastUpdateLabel.TextColor3 = Color3.fromRGB(160, 160, 160)
LastUpdateLabel.TextXAlignment = Enum.TextXAlignment.Right
LastUpdateLabel.Text = "idle"

local BtnContainer = Instance.new("Frame", Header)
BtnContainer.AnchorPoint = Vector2.new(1, 0.5)
BtnContainer.Position = UDim2.new(0.99, -8, 0.5, 0)
BtnContainer.Size = UDim2.new(0, 84, 0.9, 0)
BtnContainer.BackgroundTransparency = 1
local BtnLayout = Instance.new("UIListLayout", BtnContainer)
BtnLayout.FillDirection = Enum.FillDirection.Horizontal
BtnLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
BtnLayout.Padding = UDim.new(0, 6)

local function makeButton(text, sizeX)
	local btn = Instance.new("TextButton")
	btn.Size = UDim2.new(0, sizeX or 28, 1, 0)
	btn.BackgroundColor3 = Color3.fromRGB(36, 38, 40)
	btn.BorderSizePixel = 0
	btn.AutoButtonColor = true
	btn.Font = Enum.Font.SourceSansBold
	btn.TextSize = 14
	btn.TextColor3 = Color3.fromRGB(230, 230, 230)
	btn.Text = text
	local c = Instance.new("UICorner", btn)
	c.CornerRadius = UDim.new(0,6)
	local s = Instance.new("UIStroke", btn)
	s.Transparency = 0.6
	s.Thickness = 1
	return btn
end

local MinButton = makeButton("—", 28)
MinButton.Parent = BtnContainer
local SettingsButton = makeButton("⚙", 28)
SettingsButton.Parent = BtnContainer
local CloseButton = makeButton("✕", 28)
CloseButton.Parent = BtnContainer

local Content = Instance.new("Frame", Main)
Content.Name = "Content"
Content.Size = UDim2.new(1, -16, 1, -56)
Content.Position = UDim2.new(0, 8, 0, 40)
Content.BackgroundTransparency = 1

local Left = Instance.new("Frame", Content)
Left.Size = UDim2.new(0.45, -6, 1, 0)
Left.Position = UDim2.new(0, 0, 0, 0)
Left.BackgroundTransparency = 1

local Right = Instance.new("Frame", Content)
Right.Size = UDim2.new(0.55, 0, 1, 0)
Right.Position = UDim2.new(0.45, 8, 0, 0)
Right.BackgroundTransparency = 1

local function makeLabel(parent, title, y)
	local t = Instance.new("TextLabel", parent)
	t.Size = UDim2.new(1, 0, 0, 22)
	t.Position = UDim2.new(0, 0, 0, y)
	t.BackgroundTransparency = 1
	t.Font = Enum.Font.SourceSans
	t.TextSize = 13
	t.TextColor3 = Color3.fromRGB(170,170,170)
	t.TextXAlignment = Enum.TextXAlignment.Left
	t.Text = title
	local v = Instance.new("TextLabel", parent)
	v.Size = UDim2.new(1, 0, 0, 26)
	v.Position = UDim2.new(0, 0, 0, y + 22)
	v.BackgroundTransparency = 1
	v.Font = Enum.Font.SourceSansBold
	v.TextSize = 16
	v.TextColor3 = Color3.fromRGB(250,250,250)
	v.TextXAlignment = Enum.TextXAlignment.Left
	v.Text = "-"
	return t, v
end

local lblMySumTitle, lblMySum = makeLabel(Left, "My Sum", 0)
local lblPointsNeededTitle, lblPointsNeeded = makeLabel(Left, "Points Needed", 54)
local lblSafeChanceTitle, lblSafeChance = makeLabel(Left, "Safe Draw Chance", 108)

local statOpponentTitle = Instance.new("TextLabel", Right)
statOpponentTitle.Size = UDim2.new(1, 0, 0, 22)
statOpponentTitle.Position = UDim2.new(0, 0, 0, 0)
statOpponentTitle.BackgroundTransparency = 1
statOpponentTitle.Font = Enum.Font.SourceSans
statOpponentTitle.TextSize = 13
statOpponentTitle.TextColor3 = Color3.fromRGB(170,170,170)
statOpponentTitle.TextXAlignment = Enum.TextXAlignment.Left
statOpponentTitle.Text = "Opponent (known / hidden)"
local statOpponent = Instance.new("TextLabel", Right)
statOpponent.Size = UDim2.new(1, 0, 0, 26)
statOpponent.Position = UDim2.new(0, 0, 0, 22)
statOpponent.BackgroundTransparency = 1
statOpponent.Font = Enum.Font.SourceSansBold
statOpponent.TextSize = 16
statOpponent.TextColor3 = Color3.fromRGB(250,250,250)
statOpponent.TextXAlignment = Enum.TextXAlignment.Left
statOpponent.Text = "-"

local statDeckTitle = Instance.new("TextLabel", Right)
statDeckTitle.Size = UDim2.new(1, 0, 0, 22)
statDeckTitle.Position = UDim2.new(0, 0, 0, 60)
statDeckTitle.BackgroundTransparency = 1
statDeckTitle.Font = Enum.Font.SourceSans
statDeckTitle.TextSize = 13
statDeckTitle.TextColor3 = Color3.fromRGB(170,170,170)
statDeckTitle.TextXAlignment = Enum.TextXAlignment.Left
statDeckTitle.Text = "Remaining Deck"
local statDeck = Instance.new("TextLabel", Right)
statDeck.Size = UDim2.new(1, 0, 1, -86)
statDeck.Position = UDim2.new(0, 0, 0, 82)
statDeck.BackgroundTransparency = 1
statDeck.RichText = true
statDeck.Font = Enum.Font.SourceSansBold
statDeck.TextSize = 14
statDeck.TextColor3 = Color3.fromRGB(230,230,230)
statDeck.TextXAlignment = Enum.TextXAlignment.Left
statDeck.TextYAlignment = Enum.TextYAlignment.Top
statDeck.TextWrapped = true
statDeck.Text = "-"

local Footer = Instance.new("Frame", Main)
Footer.Size = UDim2.new(1, 0, 0, 28)
Footer.Position = UDim2.new(0, 0, 1, -28)
Footer.BackgroundTransparency = 1

local FooterText = Instance.new("TextLabel", Footer)
FooterText.Size = UDim2.new(1, -120, 1, 0)
FooterText.Position = UDim2.new(0, 12, 0, 0)
FooterText.BackgroundTransparency = 1
FooterText.Font = Enum.Font.SourceSans
FooterText.TextSize = 12
FooterText.TextColor3 = Color3.fromRGB(150,150,150)
FooterText.TextXAlignment = Enum.TextXAlignment.Left
FooterText.Text = "Status: ready"

local RefreshButton = makeButton("↻", 44)
RefreshButton.Parent = Footer
RefreshButton.Position = UDim2.new(1, -108, 0, 0)
RefreshButton.AnchorPoint = Vector2.new(1,0)
RefreshButton.Parent = Footer

local CopyButton = makeButton("Copy", 52)
CopyButton.Parent = Footer
CopyButton.Position = UDim2.new(1, -56, 0, 0)
CopyButton.AnchorPoint = Vector2.new(1,0)

local SettingsPanel = Instance.new("Frame", Main)
SettingsPanel.Name = "SettingsPanel"
SettingsPanel.Size = UDim2.new(0.9, 0, 0, 120)
SettingsPanel.Position = UDim2.new(0.05, 0, 1, 8)
SettingsPanel.BackgroundColor3 = Color3.fromRGB(28,28,30)
SettingsPanel.BorderSizePixel = 0
SettingsPanel.Visible = false
local SettingsCorner = Instance.new("UICorner", SettingsPanel)
SettingsCorner.CornerRadius = UDim.new(0,8)
local SettingsLayout = Instance.new("UIListLayout", SettingsPanel)
SettingsLayout.Padding = UDim.new(0,8)
SettingsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
SettingsLayout.VerticalAlignment = Enum.VerticalAlignment.Top
SettingsLayout.SortOrder = Enum.SortOrder.LayoutOrder

local OpacityFrame = Instance.new("Frame", SettingsPanel)
OpacityFrame.Size = UDim2.new(1, -12, 0, 28)
OpacityFrame.Position = UDim2.new(0, 8, 0, 8)
OpacityFrame.BackgroundTransparency = 1
local OpacityLabel = Instance.new("TextLabel", OpacityFrame)
OpacityLabel.Size = UDim2.new(0.4, 0, 1, 0)
OpacityLabel.Position = UDim2.new(0, 0, 0, 0)
OpacityLabel.BackgroundTransparency = 1
OpacityLabel.Font = Enum.Font.SourceSans
OpacityLabel.TextSize = 13
OpacityLabel.TextColor3 = Color3.fromRGB(180,180,180)
OpacityLabel.Text = "Opacity"
local OpacityValue = Instance.new("TextLabel", OpacityFrame)
OpacityValue.Size = UDim2.new(0.2, 0, 1, 0)
OpacityValue.Position = UDim2.new(0.8, 0, 0, 0)
OpacityValue.BackgroundTransparency = 1
OpacityValue.Font = Enum.Font.SourceSansBold
OpacityValue.TextSize = 13
OpacityValue.TextColor3 = Color3.fromRGB(220,220,220)
OpacityValue.Text = "100%"

local SliderBar = Instance.new("Frame", OpacityFrame)
SliderBar.Size = UDim2.new(0.55, 0, 0.36, 0)
SliderBar.Position = UDim2.new(0.42, 0, 0.32, 0)
SliderBar.BackgroundColor3 = Color3.fromRGB(40,40,42)
SliderBar.BorderSizePixel = 0
local SliderCorner = Instance.new("UICorner", SliderBar)
SliderCorner.CornerRadius = UDim.new(0,6)
local SliderHandle = Instance.new("Frame", SliderBar)
SliderHandle.Size = UDim2.new(0, 14, 1, 0)
SliderHandle.Position = UDim2.new(1, -14, 0, 0)
SliderHandle.BackgroundColor3 = Color3.fromRGB(200,200,200)
local HandleCorner = Instance.new("UICorner", SliderHandle)
HandleCorner.CornerRadius = UDim.new(0,6)

local pinned = false
local dragging, dragStart, startPos

local function clamp(n, a, b)
	if n < a then return a end
	if n > b then return b end
	return n
end

local settingsOpen = false

local function setVisibilityCollapsed(collapsed)
	if collapsed then
		TweenService:Create(Main, TweenInfo.new(0.18, Enum.EasingStyle.Quad), {Size = UDim2.new(0, 180, 0, 38)}):Play()
		Header.Visible = true
		Content.Visible = false
		Footer.Visible = false
	else
		TweenService:Create(Main, TweenInfo.new(0.18, Enum.EasingStyle.Quad), {Size = UDim2.new(0, 320, 0, 180)}):Play()
		task.delay(0.18, function()
			Content.Visible = true
			Footer.Visible = true
		end)
	end
end

MinButton.MouseButton1Click:Connect(function()
	local collapsed = Content.Visible
	setVisibilityCollapsed(collapsed)
end)

SettingsButton.MouseButton1Click:Connect(function()
	settingsOpen = not settingsOpen
	SettingsPanel.Visible = settingsOpen
end)

CloseButton.MouseButton1Click:Connect(function()
	ScreenGui:Destroy()
end)

local function updateOpacityFromPercent(p)
	local alpha = clamp(p, 30, 100)
	Main.BackgroundTransparency = 1 - (alpha/100)
	OpacityValue.Text = tostring(math.floor(alpha)) .. "%"
end

local draggingSlider = false
local sliderX = 0

SliderBar.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		draggingSlider = true
		UserInputService.MouseIconEnabled = true
		local absPos = input.Position.X - SliderBar.AbsolutePosition.X
		sliderX = clamp(absPos / SliderBar.AbsoluteSize.X, 0, 1)
		SliderHandle.Position = UDim2.new(sliderX, -14, 0, 0)
		updateOpacityFromPercent(sliderX * 100)
	end
end)
SliderBar.InputEnded:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		draggingSlider = false
		UserInputService.MouseIconEnabled = false
	end
end)
UserInputService.InputChanged:Connect(function(input)
	if draggingSlider and input.UserInputType == Enum.UserInputType.MouseMovement then
		local absPos = input.Position.X - SliderBar.AbsolutePosition.X
		sliderX = clamp(absPos / SliderBar.AbsoluteSize.X, 0, 1)
		SliderHandle.Position = UDim2.new(sliderX, -14, 0, 0)
		updateOpacityFromPercent(sliderX * 100)
	end
end)

local function makeDraggable(frame, handle)
	handle.InputBegan:Connect(function(input)
		if pinned then return end
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging = true
			dragStart = input.Position
			startPos = frame.Position
			local conn
			conn = input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
					conn:Disconnect()
				end
			end)
		end
	end)
	UserInputService.InputChanged:Connect(function(input)
		if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
			local delta = input.Position - dragStart
			frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
		end
	end)
end

makeDraggable(Main, Header)

local pinnedBtn = makeButton("📌", 36)
pinnedBtn.Parent = Header
pinnedBtn.Position = UDim2.new(1, -120, 0.5, 0)
pinnedBtn.AnchorPoint = Vector2.new(1, 0.5)
pinnedBtn.LayoutOrder = 1

pinnedBtn.MouseButton1Click:Connect(function()
	pinned = not pinned
	if pinned then
		pinnedBtn.BackgroundColor3 = Color3.fromRGB(58,120,255)
	else
		pinnedBtn.BackgroundColor3 = Color3.fromRGB(36,38,40)
	end
end)

local lastUpdate = 0
local updateThrottle = 0.12

local function safeFindTextLabel(path)
	local ok, res = pcall(function()
		local t = path
		if t and t:IsA("TextLabel") then return t end
		return nil
	end)
	if ok then return res end
	return nil
end

local function parseCardText(scoreLabel)
	if not scoreLabel then return nil end
	local s = tostring(scoreLabel):gsub("%s","")
	local n = tonumber(scoreLabel)
	if n then return tostring(n) end
	return tostring(scoreLabel)
end

local function updateAdvisor()
	local now = tick()
	if now - lastUpdate < updateThrottle then return end
	lastUpdate = now
	local ok, result = pcall(function()
		local room = workspace:FindFirstChild("Room")
		if not room then return nil end
		local cardsContainer = room:FindFirstChild("Cards")
		local opponent = room:FindFirstChild("Opponent")
		local myCam = room:FindFirstChild("Camera") or workspace.CurrentCamera
		local main = room:FindFirstChild("Main")
		local goalValue
		if main then
			local sumObj = main:FindFirstChild("YourCardsSum")
			if sumObj and sumObj:FindFirstChild("SurfaceGui") and sumObj.SurfaceGui:FindFirstChild("TextLabel") then
				local txt = sumObj.SurfaceGui.TextLabel.Text or ""
				local m = txt:match("(%d+)")
				if m then
					goalValue = tonumber(m)
				end
			end
		end
		if not (cardsContainer and opponent and myCam and goalValue) then return {status="waiting"} end

		local myCards, oppCards = {}, {}
		local opponentRoot = opponent:FindFirstChild("HumanoidRootPart")
		local camPos = myCam.Position or (workspace.CurrentCamera and workspace.CurrentCamera.CFrame.Position) or Vector3.new(0,0,0)
		for _, obj in ipairs(cardsContainer:GetChildren()) do
			if obj.Name == "Card" and obj:IsA("BasePart") then
				local scoreLabel = nil
				if obj:FindFirstChild("Score") and obj.Score:FindFirstChild("TextLabel") then
					scoreLabel = obj.Score.TextLabel.Text
				end
				local faceValue = scoreLabel or "[Hidden]"
				local pos = obj.Position or Vector3.new(0,0,0)
				local distToOpponent = (opponentRoot and (pos - opponentRoot.Position).Magnitude) or math.huge
				local distToMe = (pos - camPos).Magnitude
				local owner = (distToOpponent < distToMe) and "Opponent" or "Me"
				if owner == "Me" then
					table.insert(myCards, faceValue)
				else
					table.insert(oppCards, faceValue)
				end
			end
		end

		local function cardValue(v)
			if not v then return nil end
			if v == "L" then return 99 end
			local n = tonumber(v)
			return n
		end

		local mySum = 0
		for _, v in ipairs(myCards) do
			local n = cardValue(v)
			if n then mySum = mySum + n end
		end

		local oppKnownSum, oppHiddenCount = 0, 0
		for _, v in ipairs(oppCards) do
			local n = cardValue(v)
			if n then
				oppKnownSum = oppKnownSum + n
			else
				oppHiddenCount = oppHiddenCount + 1
			end
		end

		local deck = {1,2,3,4,5,6,7,8,9,10,11}
		local visibleCards = {}
		for _, v in ipairs(myCards) do
			local n = tonumber(v)
			if n then table.insert(visibleCards, n) end
		end
		for _, v in ipairs(oppCards) do
			local n = tonumber(v)
			if n then table.insert(visibleCards, n) end
		end
		for _, vc in ipairs(visibleCards) do
			for i = #deck, 1, -1 do
				if deck[i] == vc then
					table.remove(deck, i)
					break
				end
			end
		end

		local safeDraws, bustDraws = 0, 0
		for _, value in ipairs(deck) do
			if mySum + value <= goalValue then
				safeDraws = safeDraws + 1
			else
				bustDraws = bustDraws + 1
			end
		end
		local totalRemaining = safeDraws + bustDraws
		local safeChance = (totalRemaining > 0) and (safeDraws / totalRemaining) or 0

		local sumOfDeck = 0
		for _, v in ipairs(deck) do sumOfDeck = sumOfDeck + v end
		local avgDeckValue = (totalRemaining > 0) and (sumOfDeck / totalRemaining) or 0
		local oppExpectedSum = oppKnownSum + (oppHiddenCount * avgDeckValue)

		local pointsNeeded = goalValue - mySum
		local opponentBust = oppKnownSum > goalValue

		local requiredSafeChance = 0.50
		local opponentAdvantage = math.max(0, oppExpectedSum - mySum)
		requiredSafeChance = requiredSafeChance - (opponentAdvantage * 0.05)
		requiredSafeChance = math.max(0.40, requiredSafeChance)

		local recommendation = "HOLD"
		local recColor = Color3.fromRGB(200,50,50)
		if opponentBust then
			recommendation = "HOLD"
			recColor = Color3.fromRGB(200,50,50)
		elseif (1 - safeChance) >= 0.5 and oppExpectedSum <= mySum then
			recommendation = "HOLD"
			recColor = Color3.fromRGB(200,50,50)
		elseif safeChance >= requiredSafeChance then
			recommendation = "TAKE"
			recColor = Color3.fromRGB(50,200,50)
		else
			recommendation = "HOLD"
			recColor = Color3.fromRGB(200,50,50)
		end

		local deckTextParts = {}
		for i, card in ipairs(deck) do
			if mySum + card <= goalValue then
				table.insert(deckTextParts, ("<font color='rgb(50,200,80)'>%d</font>"):format(card))
			else
				table.insert(deckTextParts, ("<font color='rgb(200,80,80)'>%d</font>"):format(card))
			end
		end
		local deckText = table.concat(deckTextParts, ", ")

		return {
			status = "ok",
			mySum = mySum,
			pointsNeeded = pointsNeeded,
			safeChance = safeChance,
			oppKnownSum = oppKnownSum,
			oppHiddenCount = oppHiddenCount,
			oppExpectedSum = oppExpectedSum,
			deckText = deckText,
			totalRemaining = totalRemaining,
			recommendation = recommendation,
			recColor = recColor,
			goalValue = goalValue
		}
	end)
	if not ok or not result then
		FooterText.Text = "Status: no data"
		LastUpdateLabel.Text = "idle"
		lblMySum.Text = "-"
		lblPointsNeeded.Text = "-"
		lblSafeChance.Text = "-"
		statOpponent.Text = "-"
		statDeck.Text = "-"
		return
	end

	if result.status == "waiting" then
		FooterText.Text = "Status: waiting for room data"
		LastUpdateLabel.Text = os.date("%H:%M:%S")
		lblMySum.Text = "-"
		lblPointsNeeded.Text = "-"
		lblSafeChance.Text = "-"
		statOpponent.Text = "-"
		statDeck.Text = "-"
		return
	end

	lblMySum.Text = tostring(result.mySum)
	lblPointsNeeded.Text = tostring(result.pointsNeeded)
	lblSafeChance.Text = string.format("%.1f%%", result.safeChance * 100)
	statOpponent.Text = string.format("%d / %d", result.oppKnownSum, result.oppHiddenCount)
	statDeck.Text = result.deckText or "-"
	FooterText.Text = ("Status: updated • goal %d • remaining %d"):format(result.goalValue, result.totalRemaining)
	LastUpdateLabel.Text = os.date("%H:%M:%S")
	if result.recommendation == "TAKE" then
		Title.TextColor3 = Color3.fromRGB(90, 220, 110)
	else
		Title.TextColor3 = Color3.fromRGB(250, 200, 100)
	end
	return
end

RunService.RenderStepped:Connect(function()
	updateAdvisor()
end)

RefreshButton.MouseButton1Click:Connect(function()
	updateAdvisor()
end)

local function trySetClipboard(text)
	pcall(function()
		if setclipboard then
			setclipboard(text)
		elseif syn and syn.set_clipboard then
			syn.set_clipboard(text)
		end
	end)
end

CopyButton.MouseButton1Click:Connect(function()
	local text = string.format(
		"MySum: %s\nPointsNeeded: %s\nSafeChance: %s\nOpponentKnown: %s\nOpponentHidden: %s\nRemainingDeck: %s\nLastUpdate: %s",
		lblMySum.Text, lblPointsNeeded.Text, lblSafeChance.Text, statOpponent.Text:match("^(%d+)") or "-", statOpponent.Text:match("/%s*(%d+)$") or "-", statDeck.Text:gsub("<.->",""), LastUpdateLabel.Text
	)
	trySetClipboard(text)
	FooterText.Text = "Status: copied to clipboard (if supported)"
	task.delay(1.4, function()
		FooterText.Text = "Status: ready"
	end)
end)

task.delay(0.1, function()
	updateOpacityFromPercent(100)
end)

setVisibilityCollapsed(false)
updateAdvisor()
