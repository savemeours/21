local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

local VirtualInputManager = nil
pcall(function() VirtualInputManager = game:GetService("VirtualInputManager") end)
local VirtualUser = nil
pcall(function() VirtualUser = game:GetService("VirtualUser") end)

local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

local function clamp(n, a, b) if n < a then return a elseif n > b then return b else return n end end

local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "CardCounter"
ScreenGui.ResetOnSpawn = false
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.Parent = PlayerGui

local Frame = Instance.new("Frame")
Frame.Size = UDim2.new(0, 300, 0, 180)
Frame.Position = UDim2.new(0.5, -150, 0.18, 0)
Frame.AnchorPoint = Vector2.new(0.5, 0)
Frame.BackgroundColor3 = Color3.fromRGB(18, 18, 18)
Frame.BorderSizePixel = 0
Frame.Parent = ScreenGui
local UICorner = Instance.new("UICorner", Frame)
UICorner.CornerRadius = UDim.new(0, 12)

local Gradient = Instance.new("UIPadding", Frame)
Gradient.PaddingTop = UDim.new(0, 0)

local Header = Instance.new("Frame", Frame)
Header.Size = UDim2.new(1, 0, 0, 42)
Header.BackgroundTransparency = 1
Header.Position = UDim2.new(0, 0, 0, 0)

local Title = Instance.new("TextLabel", Header)
Title.Size = UDim2.new(1, -90, 1, 0)
Title.Position = UDim2.new(0, 12, 0, 6)
Title.BackgroundTransparency = 1
Title.Text = "Card Counter"
Title.Font = Enum.Font.GothamBold
Title.TextSize = 20
Title.TextColor3 = Color3.fromRGB(240, 240, 240)
Title.TextXAlignment = Enum.TextXAlignment.Left

local StatusDot = Instance.new("Frame", Header)
StatusDot.Size = UDim2.new(0, 12, 0, 12)
StatusDot.Position = UDim2.new(1, -100, 0, 15)
StatusDot.AnchorPoint = Vector2.new(0, 0)
StatusDot.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
StatusDot.BorderSizePixel = 0
local StatusCorner = Instance.new("UICorner", StatusDot)
StatusCorner.CornerRadius = UDim.new(1, 0)

local AutoButton = Instance.new("TextButton", Header)
AutoButton.Size = UDim2.new(0, 34, 0, 30)
AutoButton.Position = UDim2.new(1, -56, 0, 6)
AutoButton.AnchorPoint = Vector2.new(0, 0)
AutoButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
AutoButton.Text = "A"
AutoButton.TextColor3 = Color3.fromRGB(0, 0, 0)
AutoButton.Font = Enum.Font.GothamBold
AutoButton.TextSize = 16
AutoButton.AutoButtonColor = false
local AutoUICorner = Instance.new("UICorner", AutoButton)
AutoUICorner.CornerRadius = UDim.new(0, 8)

local CloseButton = Instance.new("TextButton", Header)
CloseButton.Size = UDim2.new(0, 34, 0, 30)
CloseButton.Position = UDim2.new(1, -18, 0, 6)
CloseButton.AnchorPoint = Vector2.new(0, 0)
CloseButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
CloseButton.Text = "X"
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.Font = Enum.Font.GothamBold
CloseButton.TextSize = 16
CloseButton.AutoButtonColor = false
local CloseUICorner = Instance.new("UICorner", CloseButton)
CloseUICorner.CornerRadius = UDim.new(0, 8)

local DragHandle = Instance.new("TextButton", Frame)
DragHandle.Name = "DragHandle"
DragHandle.Size = UDim2.new(1, 0, 0, 42)
DragHandle.Position = UDim2.new(0, 0, 0, 0)
DragHandle.BackgroundTransparency = 1
DragHandle.Text = ""
DragHandle.AutoButtonColor = false
DragHandle.ZIndex = 2

local Body = Instance.new("Frame", Frame)
Body.Size = UDim2.new(1, -20, 1, -62)
Body.Position = UDim2.new(0, 10, 0, 52)
Body.BackgroundTransparency = 1

local Recommendation = Instance.new("TextLabel", Body)
Recommendation.Size = UDim2.new(1, 0, 0, 44)
Recommendation.Position = UDim2.new(0, 0, 0, 0)
Recommendation.BackgroundTransparency = 1
Recommendation.Font = Enum.Font.GothamBlack
Recommendation.TextSize = 32
Recommendation.Text = "WAITING..."
Recommendation.TextColor3 = Color3.fromRGB(255, 200, 0)
Recommendation.TextXAlignment = Enum.TextXAlignment.Center
Recommendation.RichText = false

local InfoLabel = Instance.new("TextLabel", Body)
InfoLabel.Size = UDim2.new(1, 0, 1, -48)
InfoLabel.Position = UDim2.new(0, 0, 0, 48)
InfoLabel.BackgroundTransparency = 1
InfoLabel.Font = Enum.Font.Gotham
InfoLabel.TextSize = 14
InfoLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
InfoLabel.TextXAlignment = Enum.TextXAlignment.Left
InfoLabel.TextYAlignment = Enum.TextYAlignment.Top
InfoLabel.RichText = true
InfoLabel.TextWrapped = true
InfoLabel.Text = "Waiting for game data..."

local BottomBar = Instance.new("Frame", Frame)
BottomBar.Size = UDim2.new(1, 0, 0, 8)
BottomBar.Position = UDim2.new(0, 0, 1, -8)
BottomBar.BackgroundColor3 = Color3.fromRGB(28, 28, 28)
local BottomCorner = Instance.new("UICorner", BottomBar)
BottomCorner.CornerRadius = UDim.new(0, 6)

local AutoOn = false
local AutoLoopThread = nil
local AutoAvailable = (VirtualInputManager ~= nil) or (VirtualUser ~= nil)
local dragging, dragStart, startPos, dragConnChanged

local function setAutoAppearance(on)
	if on then
		AutoButton.BackgroundColor3 = Color3.fromRGB(50, 200, 50)
		AutoButton.TextColor3 = Color3.fromRGB(255, 255, 255)
		StatusDot.BackgroundColor3 = Color3.fromRGB(50, 200, 50)
	else
		AutoButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		AutoButton.TextColor3 = Color3.fromRGB(0, 0, 0)
		StatusDot.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
	end
end

local function safeClick(vx, vy, button)
	if VirtualInputManager then
		VirtualInputManager:SendMouseButtonEvent(vx, vy, button, true, game, 1)
		task.wait(0.02)
		VirtualInputManager:SendMouseButtonEvent(vx, vy, button, false, game, 1)
	elseif VirtualUser then
		VirtualUser:CaptureController()
		if button == 0 and VirtualUser.Button1Down then
			VirtualUser:Button1Down(Vector2.new(vx, vy))
			task.wait(0.02)
			VirtualUser:Button1Up(Vector2.new(vx, vy))
		elseif button == 1 and VirtualUser.Button2Down then
			VirtualUser:Button2Down(Vector2.new(vx, vy))
			task.wait(0.02)
			VirtualUser:Button2Up(Vector2.new(vx, vy))
		end
	end
end

local function doAutoActionForRec(rec, vx, vy)
	if rec:find("TAKE") then
		safeClick(vx, vy, 0)
		task.wait(0.1)
		safeClick(vx, vy, 0)
	elseif rec:find("HOLD") then
		safeClick(vx, vy, 1)
		task.wait(0.1)
		safeClick(vx, vy, 1)
	end
end

local function startAutoLoop()
	if AutoLoopThread then return end
	AutoLoopThread = task.spawn(function()
		while AutoOn and ScreenGui.Parent do
			local camera = workspace.CurrentCamera
			if not camera then
				task.wait(1)
				continue
			end
			local vx = math.floor(camera.ViewportSize.X / 2)
			local vy = math.floor(camera.ViewportSize.Y / 2)
			local rec = ""
			pcall(function() rec = (Recommendation.Text or ""):upper() end)
			if rec ~= "" then
				pcall(function() doAutoActionForRec(rec, vx, vy) end)
			end
			task.wait(1)
		end
		AutoLoopThread = nil
	end)
end

local function stopAutoLoop()
	AutoOn = false
	AutoLoopThread = nil
	setAutoAppearance(false)
end

AutoButton.MouseButton1Click:Connect(function()
	if not AutoAvailable then
		local old = AutoButton.BackgroundColor3
		AutoButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
		task.delay(0.35, function()
			if AutoButton and AutoButton.Parent then
				AutoButton.BackgroundColor3 = old
			end
		end)
		InfoLabel.Text = (InfoLabel.Text or "") .. "\n[Auto] No supported click-sim method found."
		return
	end
	AutoOn = not AutoOn
	setAutoAppearance(AutoOn)
	if AutoOn then
		startAutoLoop()
	else
		stopAutoLoop()
	end
end)

CloseButton.MouseButton1Click:Connect(function()
	ScreenGui:Destroy()
	if script then script:Destroy() end
end)

DragHandle.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		dragging = true
		dragStart = input.Position
		startPos = Frame.Position
		dragConnChanged = input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				dragging = false
				if dragConnChanged then dragConnChanged:Disconnect() dragConnChanged = nil end
				local screenW = workspace.CurrentCamera and workspace.CurrentCamera.ViewportSize.X or 1920
				local screenH = workspace.CurrentCamera and workspace.CurrentCamera.ViewportSize.Y or 1080
				local x = clamp(Frame.Position.X.Offset, 0, screenW - Frame.AbsoluteSize.X)
				local y = clamp(Frame.Position.Y.Offset, 0, screenH - Frame.AbsoluteSize.Y)
				Frame.Position = UDim2.new(Frame.Position.X.Scale, x, Frame.Position.Y.Scale, y)
			end
		end)
	end
end)

DragHandle.InputChanged:Connect(function(input)
	if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
		local delta = input.Position - dragStart
		local newX = startPos.X.Offset + delta.X
		local newY = startPos.Y.Offset + delta.Y
		local screenW = workspace.CurrentCamera and workspace.CurrentCamera.ViewportSize.X or 1920
		local screenH = workspace.CurrentCamera and workspace.CurrentCamera.ViewportSize.Y or 1080
		newX = clamp(newX, 0, screenW - Frame.AbsoluteSize.X)
		newY = clamp(newY, 0, screenH - Frame.AbsoluteSize.Y)
		TweenService:Create(Frame, TweenInfo.new(0.06, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Position = UDim2.new(Frame.Position.X.Scale, newX, Frame.Position.Y.Scale, newY)}):Play()
	end
end)

UserInputService.InputBegan:Connect(function(input, gpe)
	if gpe then return end
	if input.KeyCode == Enum.KeyCode.F8 then
		AutoOn = not AutoOn
		setAutoAppearance(AutoOn)
		if AutoOn then startAutoLoop() else stopAutoLoop() end
	end
	if input.KeyCode == Enum.KeyCode.Delete then
		ScreenGui:Destroy()
		if script then script:Destroy() end
	end
end)

local function findTextLabel(root, path)
	if not root then return nil end
	local current = root
	for _, name in ipairs(path) do
		if not current then return nil end
		current = current:FindFirstChild(name)
	end
	if current and current:IsA("TextLabel") then return current end
	return nil
end

local function updateAdvisor()
	local room = workspace:FindFirstChild("Room")
	if not room then
		Recommendation.Text = "WAITING..."
		Recommendation.TextColor3 = Color3.fromRGB(255, 200, 0)
		InfoLabel.Text = "Waiting for game data..."
		return
	end
	local cardsContainer = room:FindFirstChild("Cards")
	local opponent = room:FindFirstChild("Opponent")
	local opponentRoot = opponent and opponent:FindFirstChild("HumanoidRootPart")
	local myCamera = room:FindFirstChild("Camera") or workspace.CurrentCamera
	local goalValue
	local sumLabel = room:FindFirstChild("Main") and room.Main:FindFirstChild("YourCardsSum") and room.Main.YourCardsSum:FindFirstChild("SurfaceGui") and room.Main.YourCardsSum.SurfaceGui:FindFirstChild("TextLabel")
	if sumLabel and sumLabel:IsA("TextLabel") then
		goalValue = tonumber((sumLabel.Text or ""):match("%d+/(%d+)"))
	end
	if not (cardsContainer and opponentRoot and myCamera and goalValue) then
		Recommendation.Text = "WAITING..."
		Recommendation.TextColor3 = Color3.fromRGB(255, 200, 0)
		InfoLabel.Text = "Waiting for game data..."
		return
	end
	local myCards, opponentCards = {}, {}
	for _, obj in ipairs(cardsContainer:GetChildren()) do
		if obj.Name == "Card" and obj:IsA("BasePart") then
			local scoreLabel = obj:FindFirstChild("Score") and obj.Score:FindFirstChild("TextLabel")
			local faceValue = scoreLabel and scoreLabel.Text or "[Hidden]"
			local distToOpponent = (obj.Position - opponentRoot.Position).Magnitude
			local distToMe = (obj.Position - (myCamera.Position or workspace.CurrentCamera.CFrame.Position)).Magnitude
			local owner = (distToOpponent < distToMe) and "Opponent" or "Me"
			if owner == "Me" then
				table.insert(myCards, faceValue)
			else
				table.insert(opponentCards, faceValue)
			end
		end
	end
	local function cardValue(v)
		if v == "L" then return 99 end
		local n = tonumber(v)
		return n
	end
	local mySum = 0
	for _, v in ipairs(myCards) do
		local n = cardValue(v)
		if n then mySum = mySum + n end
	end
	local oppKnownSum, oppHiddenCount = 0, 0
	for _, v in ipairs(opponentCards) do
		local n = cardValue(v)
		if n then oppKnownSum = oppKnownSum + n else oppHiddenCount = oppHiddenCount + 1 end
	end
	local deck = {1,2,3,4,5,6,7,8,9,10,11}
	local visibleCards = {}
	for _, v in ipairs(myCards) do
		local n = tonumber(v)
		if n then table.insert(visibleCards, n) end
	end
	for _, v in ipairs(opponentCards) do
		local n = tonumber(v)
		if n then table.insert(visibleCards, n) end
	end
	for _, cardValue in ipairs(visibleCards) do
		for i, deckCard in ipairs(deck) do
			if deckCard == cardValue then
				table.remove(deck, i)
				break
			end
		end
	end
	local safeDraws, bustDraws = 0, 0
	for _, value in ipairs(deck) do
		if mySum + value <= goalValue then
			safeDraws += 1
		else
			bustDraws += 1
		end
	end
	local totalRemaining = safeDraws + bustDraws
	local safeChance = (totalRemaining > 0) and (safeDraws / totalRemaining) or 0
	local sumOfDeck = 0
	for _, v in ipairs(deck) do sumOfDeck = sumOfDeck + v end
	local avgDeckValue = (totalRemaining > 0) and (sumOfDeck / totalRemaining) or 0
	local oppExpectedSum = oppKnownSum + (oppHiddenCount * avgDeckValue)
	local pointsNeeded = goalValue - mySum
	local opponentBust = oppKnownSum > goalValue
	local requiredSafeChance = 0.50
	local opponentAdvantage = math.max(0, oppExpectedSum - mySum)
	requiredSafeChance = requiredSafeChance - (opponentAdvantage * 0.05)
	requiredSafeChance = math.max(0.40, requiredSafeChance)
	if opponentBust then
		Recommendation.Text = "HOLD"
		Recommendation.TextColor3 = Color3.fromRGB(200, 50, 50)
	elseif (1 - safeChance) >= 0.5 and oppExpectedSum <= mySum then
		Recommendation.Text = "HOLD"
		Recommendation.TextColor3 = Color3.fromRGB(200, 50, 50)
	elseif safeChance >= requiredSafeChance then
		Recommendation.Text = "TAKE"
		Recommendation.TextColor3 = Color3.fromRGB(50, 200, 50)
	else
		Recommendation.Text = "HOLD"
		Recommendation.TextColor3 = Color3.fromRGB(200, 50, 50)
	end
	local deckText = ""
	for i, card in ipairs(deck) do
		local ok = (mySum + card <= goalValue)
		if ok then
			deckText = deckText .. "<font color=\"#32C820\">" .. card .. "</font>"
		else
			deckText = deckText .. "<font color=\"#C83220\">" .. card .. "</font>"
		end
		if i < #deck then deckText = deckText .. ", " end
	end
	InfoLabel.Text = string.format("Safe Draw Chance: %.1f%%\nPoints Needed: %d\nOpponent Expected: %.1f\nRemaining Cards: %s", safeChance*100, pointsNeeded, oppExpectedSum, deckText)
end

RunService.RenderStepped:Connect(function()
	pcall(updateAdvisor)
end)
