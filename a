local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Parent = game.CoreGui
ScreenGui.Name = "CardAdvisor"
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

local Frame = Instance.new("Frame")
Frame.Size = UDim2.new(0, 300, 0, 240)
Frame.Position = UDim2.new(0.5, -150, 0.2, 0)
Frame.BackgroundColor3 = Color3.fromRGB(24, 24, 24)
Frame.BorderSizePixel = 0
Frame.Active = true
Frame.Draggable = true
Frame.Parent = ScreenGui

local UICorner = Instance.new("UICorner", Frame)
UICorner.CornerRadius = UDim.new(0, 12)

local UIListLayout = Instance.new("UIListLayout")
UIListLayout.Padding = UDim.new(0, 5)
UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
UIListLayout.VerticalAlignment = Enum.VerticalAlignment.Top
UIListLayout.FillDirection = Enum.FillDirection.Vertical
UIListLayout.Parent = Frame

local DragHandle = Instance.new("Frame")
DragHandle.Name = "DragHandle"
DragHandle.Parent = Frame
DragHandle.Size = UDim2.new(1, 0, 0, 35)
DragHandle.Position = UDim2.new(0, 0, 0, 0)
DragHandle.BackgroundTransparency = 1
DragHandle.ZIndex = 2
DragHandle.LayoutOrder = 1

local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(1, -60, 0, 30)
Title.Position = UDim2.new(0, 10, 0, 0)
Title.BackgroundTransparency = 1
Title.Text = "Card Advisor"
Title.Font = Enum.Font.GothamBold
Title.TextSize = 22
Title.TextColor3 = Color3.fromRGB(230, 230, 230)
Title.TextXAlignment = Enum.TextXAlignment.Left
Title.Parent = DragHandle

local CloseButton = Instance.new("TextButton")
CloseButton.Size = UDim2.new(0, 25, 0, 25)
CloseButton.Position = UDim2.new(1, -28, 0, 5)
CloseButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
CloseButton.Text = "âœ•"
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.Font = Enum.Font.SourceSansBold
CloseButton.TextSize = 20
CloseButton.Parent = DragHandle
local CloseUICorner = Instance.new("UICorner", CloseButton)
CloseUICorner.CornerRadius = UDim.new(0, 6)
CloseButton.MouseButton1Click:Connect(function()
	ScreenGui:Destroy()
	if script then script:Destroy() end
end)

local dragging, dragStart, startPos
DragHandle.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		dragging = true
		dragStart = input.Position
		startPos = Frame.Position
		local connection
		connection = input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				dragging = false
				connection:Disconnect()
			end
		end)
	end
end)
DragHandle.InputChanged:Connect(function(input)
	if (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) and dragging then
		local delta = input.Position - dragStart
		Frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end
end)

local Separator = Instance.new("Frame")
Separator.Name = "Separator"
Separator.Size = UDim2.new(1, -20, 0, 1)
Separator.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
Separator.BorderSizePixel = 0
Separator.Parent = Frame
Separator.LayoutOrder = 2

local Recommendation = Instance.new("TextLabel")
Recommendation.Name = "Recommendation"
Recommendation.Size = UDim2.new(1, -20, 0, 40)
Recommendation.BackgroundTransparency = 1
Recommendation.Font = Enum.Font.GothamBold
Recommendation.TextSize = 34
Recommendation.TextColor3 = Color3.fromRGB(255, 255, 255)
Recommendation.Parent = Frame
Recommendation.LayoutOrder = 3

local InfoContainer = Instance.new("Frame")
InfoContainer.Name = "InfoContainer"
InfoContainer.Size = UDim2.new(1, -20, 0, 140)
InfoContainer.BackgroundTransparency = 1
InfoContainer.Parent = Frame
InfoContainer.LayoutOrder = 4

local InfoListLayout = Instance.new("UIListLayout")
InfoListLayout.Padding = UDim.new(0, 3)
InfoListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
InfoListLayout.VerticalAlignment = Enum.VerticalAlignment.Top
InfoListLayout.FillDirection = Enum.FillDirection.Vertical
InfoListLayout.Parent = InfoContainer

local InfoFields = {
	SafeChance = Instance.new("TextLabel"),
	PointsNeeded = Instance.new("TextLabel"),
	OpponentExpected = Instance.new("TextLabel"),
	RemainingCardsTitle = Instance.new("TextLabel"),
	RemainingCards = Instance.new("TextLabel"),
	Status = Instance.new("TextLabel"),
}

for name, label in pairs(InfoFields) do
	label.Name = name
	label.Size = UDim2.new(1, 0, 0, 20)
	label.BackgroundTransparency = 1
	label.Font = Enum.Font.SourceSans
	label.TextSize = 16
	label.TextColor3 = Color3.fromRGB(180, 180, 180)
	label.TextXAlignment = Enum.TextXAlignment.Left
	label.TextWrapped = true
	label.RichText = true
	label.Parent = InfoContainer
	if name == "RemainingCards" then
		label.Size = UDim2.new(1, 0, 0, 40)
	elseif name == "RemainingCardsTitle" then
		label.Font = Enum.Font.SourceSansBold
		label.TextColor3 = Color3.fromRGB(230, 230, 230)
		label.Text = "Remaining Cards in Deck:"
		label.Size = UDim2.new(1, 0, 0, 18)
	end
end

local function cardValue(v)
	if v == "L" then return 99 end
	return tonumber(v)
end

local function updateAdvisor()
	local room = workspace:FindFirstChild("Room")
	local cardsContainer = room and room:FindFirstChild("Cards")
	local opponentRoot = room and room.Opponent and room.Opponent:FindFirstChild("HumanoidRootPart")
	local myCamera = room and room:FindFirstChild("Camera")

	local goalValue
	do
		local sumLabel = room
			and room.Main
			and room.Main:FindFirstChild("YourCardsSum")
			and room.Main.YourCardsSum:FindFirstChild("SurfaceGui")
			and room.Main.YourCardsSum.SurfaceGui:FindFirstChild("TextLabel")
		if sumLabel and sumLabel:IsA("TextLabel") then
			goalValue = tonumber((sumLabel.Text or ""):match("%d+/(%d+)"))
		end
	end

	if not (cardsContainer and opponentRoot and myCamera and goalValue) then
		Recommendation.Text = "WAITING..."
		Recommendation.TextColor3 = Color3.fromRGB(255, 191, 0)
		InfoFields.Status.Text = "<font color='#FFBF00'>Waiting for game data...</font>"
		InfoFields.SafeChance.Text = "Safe Draw Chance: N/A"
		InfoFields.PointsNeeded.Text = "Points Needed: N/A"
		InfoFields.OpponentExpected.Text = "Opponent Expected: N/A"
		InfoFields.RemainingCards.Text = "N/A"
		return
	end

	InfoFields.Status.Text = ""

	local myCards, opponentCards = {}, {}
	for _, obj in ipairs(cardsContainer:GetChildren()) do
		if obj.Name == "Card" and obj:IsA("BasePart") then
			local scoreLabel = obj:FindFirstChild("Score") and obj.Score:FindFirstChild("TextLabel")
			local faceValue = scoreLabel and scoreLabel.Text or "[Hidden]"
			local distToOpponent = (obj.Position - opponentRoot.Position).Magnitude
			local distToMe = (obj.Position - myCamera.Position).Magnitude
			local owner = (distToOpponent < distToMe) and "Opponent" or "Me"
			if owner == "Me" then
				table.insert(myCards, faceValue)
			else
				table.insert(opponentCards, faceValue)
			end
		end
	end

	local mySum = 0
	for _, v in ipairs(myCards) do
		local n = cardValue(v)
		if n and n <= 11 then mySum = mySum + n end
	end

	local oppKnownSum, oppHiddenCount = 0, 0
	for _, v in ipairs(opponentCards) do
		local n = cardValue(v)
		if n and n <= 11 then
			oppKnownSum = oppKnownSum + n
		elseif n == nil then
			oppHiddenCount = oppHiddenCount + 1
		end
	end

	local deck = {1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11} -- Simulasi 4 deck
	local visibleCards = {}
	for _, v in ipairs(myCards) do
		local n = tonumber(v)
		if n and n <= 11 then table.insert(visibleCards, n) end
	end
	for _, v in ipairs(opponentCards) do
		local n = tonumber(v)
		if n and n <= 11 then table.insert(visibleCards, n) end
	end
	
	for _, cardValue in ipairs(visibleCards) do
		for i, deckCard in ipairs(deck) do
			if deckCard == cardValue then
				table.remove(deck, i)
				break
			end
		end
	end

	local safeDraws, bustDraws = 0, 0
	for _, value in ipairs(deck) do
		if mySum + value <= goalValue then
			safeDraws += 1
		else
			bustDraws += 1
		end
	end
	local totalRemaining = safeDraws + bustDraws
	local safeChance = (totalRemaining > 0) and (safeDraws / totalRemaining) or 0

	local sumOfDeck = 0
	for _, v in ipairs(deck) do sumOfDeck += v end
	local avgDeckValue = (totalRemaining > 0) and (sumOfDeck / totalRemaining) or 0
	local oppExpectedSum = oppKnownSum + (oppHiddenCount * avgDeckValue)

	local pointsNeeded = goalValue - mySum
	local opponentBust = oppKnownSum >= goalValue

	local oppWinProb = (oppExpectedSum - mySum) * 0.05
	local baseTakeChance = 0.50 
	local adjustedTakeChance = baseTakeChance + oppWinProb
	
	local recommendationText, recommendationColor

	if mySum > goalValue then
		recommendationText = "BUST!"
		recommendationColor = Color3.fromRGB(200, 50, 50)
	elseif opponentBust and oppHiddenCount == 0 then
		recommendationText = "WIN (OPP BUST)"
		recommendationColor = Color3.fromRGB(50, 200, 50)
	elseif safeChance >= adjustedTakeChance and mySum < goalValue then
		recommendationText = "TAKE"
		recommendationColor = Color3.fromRGB(50, 200, 50)
	elseif mySum == goalValue then
		recommendationText = "HOLD (PERFECT)"
		recommendationColor = Color3.fromRGB(50, 150, 250)
	else
		recommendationText = "HOLD"
		recommendationColor = Color3.fromRGB(200, 50, 50)
	end

	Recommendation.Text = recommendationText
	Recommendation.TextColor3 = recommendationColor

	local deckText = ""
	local cardCounts = {}
	for _, card in ipairs(deck) do
		cardCounts[card] = (cardCounts[card] or 0) + 1
	end
	
	local sortedCards = {}
	for card in pairs(cardCounts) do table.insert(sortedCards, card) end
	table.sort(sortedCards)

	for i, card in ipairs(sortedCards) do
		local count = cardCounts[card]
		local color = (mySum + card <= goalValue) and "<font color='#32C820'>" or "<font color='#C83220'>"
		deckText = deckText .. color .. card .. "x" .. count .. "</font>"
		if i < #sortedCards then deckText = deckText .. ", " end
	end
	
	InfoFields.SafeChance.Text = string.format("Safe Draw Chance: <font color='%s'>%.1f%%</font>", (safeChance >= 0.5 and "#32C820" or "#C83220"), safeChance*100)
	InfoFields.PointsNeeded.Text = string.format("Points Needed: <font color='#A0A0FF'>%d</font>", pointsNeeded)
	InfoFields.OpponentExpected.Text = string.format("Opponent Expected Sum: <font color='#FFA0A0'>%.1f</font>", oppExpectedSum)
	InfoFields.RemainingCards.Text = deckText
end

RunService.RenderStepped:Connect(updateAdvisor)
